// <auto-generated />
using System;
using FirebirdSql.EntityFrameworkCore.Firebird.Metadata;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using easywork_backend.Database;

#nullable disable

namespace easywork_backend2.Migrations
{
    [DbContext(typeof(EasyWorkDbContext))]
    partial class EasyWorkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 31);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("roles_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("users_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("users_login", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("RoleId")
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("users_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("Value")
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("users_token", (string)null);
                });

            modelBuilder.Entity("easywork_backend.Entitys.AsignationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("description");

                    b.Property<bool>("State")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("state");

                    b.Property<Guid>("Task_Id")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS")
                        .HasColumnName("task_id");

                    b.HasKey("Id");

                    b.HasIndex("Task_Id");

                    b.ToTable("Asignations");
                });

            modelBuilder.Entity("easywork_backend.Entitys.PriorityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id")
                        .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("Priorities");
                });

            modelBuilder.Entity("easywork_backend.Entitys.ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("End_Time")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("end_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("name");

                    b.Property<string>("Project_Type")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR(150)")
                        .HasColumnName("project_type");

                    b.Property<DateTime>("Start_Time")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("start_time");

                    b.Property<int>("State_Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("state_id");

                    b.Property<Guid>("Task_Id")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS")
                        .HasColumnName("task_id");

                    b.HasKey("Id");

                    b.HasIndex("State_Id");

                    b.HasIndex("Task_Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("easywork_backend.Entitys.StatesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id")
                        .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("easywork_backend.Entitys.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS")
                        .HasColumnName("id");

                    b.Property<string>("Coment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(300)")
                        .HasColumnName("coment");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("VARCHAR(350)")
                        .HasColumnName("description");

                    b.Property<DateTime>("End_Time")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("end_time");

                    b.Property<int>("Priority_Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("priority_id");

                    b.Property<DateTime>("Start_Time")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("start_time");

                    b.Property<bool>("State")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex("Priority_Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("easywork_backend.Entitys.Tasks_ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS")
                        .HasColumnName("id");

                    b.Property<Guid>("Project_Id")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS")
                        .HasColumnName("project_id");

                    b.Property<Guid>("Task_Id")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS")
                        .HasColumnName("task_id");

                    b.HasKey("Id");

                    b.HasIndex("Project_Id");

                    b.HasIndex("Task_Id");

                    b.ToTable("Tasks_Projects");
                });

            modelBuilder.Entity("easywork_backend.Entitys.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("LockoutEnd")
                        .HasColumnType("VARCHAR(48)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("easywork_backend.Entitys.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("easywork_backend.Entitys.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("easywork_backend.Entitys.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("easywork_backend.Entitys.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("easywork_backend.Entitys.AsignationEntity", b =>
                {
                    b.HasOne("easywork_backend.Entitys.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("Task_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("easywork_backend.Entitys.ProjectEntity", b =>
                {
                    b.HasOne("easywork_backend.Entitys.StatesEntity", "States")
                        .WithMany()
                        .HasForeignKey("State_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("easywork_backend.Entitys.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("Task_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("States");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("easywork_backend.Entitys.TaskEntity", b =>
                {
                    b.HasOne("easywork_backend.Entitys.PriorityEntity", "Prioity")
                        .WithMany()
                        .HasForeignKey("Priority_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prioity");
                });

            modelBuilder.Entity("easywork_backend.Entitys.Tasks_ProjectEntity", b =>
                {
                    b.HasOne("easywork_backend.Entitys.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("easywork_backend.Entitys.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("Task_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Task");
                });
#pragma warning restore 612, 618
        }
    }
}
